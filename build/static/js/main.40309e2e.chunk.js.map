{"version":3,"sources":["Components/Editor.js","Components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["renderer","marked","Renderer","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","concat","placeholder","handleChange","bind","assertThisInitialized","setOptions","breaks","link","href","title","text","window","document","getElementById","innerHTML","e","target","react_default","a","createElement","className","rows","cols","id","defaultValue","onChange","React","Component","Preview","App","Components_Editor","Previewer","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAGIA,SAAW,IAAIC,IAAOC,UAyCXC,cAvCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACFQ,MAAM,CACPC,MAAK,GAAAC,OAAIT,EAAKD,MAAMW,cAGvBV,EAAKW,aAAaX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IANJA,mFASdJ,IAAOkB,WAAW,CACtBC,QAAO,IAIHpB,EAASqB,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAO,4BAA6BF,EAAM,YAAcC,EAAQ,KAAOC,EAAO,QAExEC,OAAOC,SAASC,eAAe,WACnCC,UAAU3B,IAAOO,KAAKI,MAAMC,MAAM,CAACb,SAASA,yCAG3C6B,GACGJ,OAAOC,SAASC,eAAe,WACnCC,UAAU3B,IAAO4B,EAAEC,OAAOjB,MAAM,CAACb,SAASA,qCAGlD,OACJ+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,oBACJF,EAAAC,EAAAC,cAAA,YAAWE,KAAM,GAAIC,KAAM,GAAIC,GAAG,SAASC,aAAc9B,KAAKI,MAAMC,MAAQ0B,SAAU/B,KAAKQ,uBA9BtEwB,IAAMC,WCsBZC,qBAvBX,SAAAA,EAAYtC,GAAO,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,GAAApC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KACTJ,0EAKV,OACI2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,4BACZF,EAAAC,EAAAC,cAAA,OAAMI,GAAG,oBAVaG,IAAMC,YC6DbE,MAxDf,WA8CE,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,+CAEAF,EAAAC,EAAAC,cAACW,EAAD,CAAQ7B,YA/CK,mgCAgDbgB,EAAAC,EAAAC,cAACY,EAAD,QC9CcC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.40309e2e.chunk.js","sourcesContent":["import React from \"react\";\nimport marked from \"marked\";\nimport \"./editor.css\";\nvar renderer = new marked.Renderer();\nclass Editor extends React.Component{\n    constructor(props){\n        super(props);\n       this.state={\n           value:`${this.props.placeholder}`\n       }\n\n        this.handleChange=this.handleChange.bind(this)\n    }\n  componentDidMount(){\n        marked.setOptions({\n    breaks:true,\n    \n        });\n        \n        renderer.link = function( href, title, text ) {\n          return '<a target=\"_blank\" href=\"'+ href +'\" title=\"' + title + '\">' + text + '</a>';\n        }  \n    let preview=window.document.getElementById(\"preview\");\n    preview.innerHTML=marked(this.state.value,{renderer:renderer})\n    }\n\nhandleChange(e){\n    let preview=window.document.getElementById(\"preview\");\n    preview.innerHTML=marked(e.target.value,{renderer:renderer})\n}\nrender(){\n    return(\n<div className=\"editor-wrapper\">\n    <h3>EDITOR</h3>\n<textarea  rows={20} cols={20} id=\"editor\" defaultValue={this.state.value}  onChange={this.handleChange}>\n\n</textarea>\n\n</div>\n\n\n    )\n}\n}\nexport default Editor;","import React from \"react\";\nimport \"./preview.css\";\nclass Preview extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n\nrender(){\n    return(\n        <div className=\"preview-wrapper\">\n            <h3>PREVİEWER</h3>\n<div  id=\"preview\" >\n\n\n\n</div>\n\n        </div>\n\n\n\n    )\n}\n}\n\nexport default Preview;","import React from 'react';\n\n\nimport './App.css';\nimport Editor from './Components/Editor';\nimport Preview from './Components/Previewer';\n\nfunction App() {\n\n\n  const placeholder = \n`# This is a huge h1\nJust write  whatever  you want inside the editor  and see the editor .Also you can see the **test** results from the  green menu at the left\nof the screeen..\n## This is h2 .\n### And this is h3 and other stuff:\n  \nHeres some code, \\`<div>dsadsadsadsadsadsadasdsad</div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nText bolder: **bold**\nItalic : _italic_.\nboth: **_both!_**\n\n\nLİnks that open with a new tab: [links](https://www.freecodecamp.com), and\n> Qutotes..\n\n\n\n- Here are the list items:\n  - Some are bulleted.\n    - With different indentation levels.\n     - That look like this.\n\n\n1. now numbered lists:\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n  return (\n    <div className=\"App\">\n      <h1>Welcome to  My MarkDown Previewer</h1>\n      \n      <Editor placeholder={placeholder} />\n      <Preview />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}